name: Deploy SIV to Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build and Deploy to Production
    runs-on: self-hosted

    steps:
      - name: üì• Checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: üß™ Liberar espa√ßo em disco antes do build
        run: |
          docker system prune -af || true

      - name: üìÑ Criar arquivo .env.production
        run: echo "${{ secrets.ENV_PRODUCTION_CONTENT }}" > .env.production

      - name: üßº Derrubar containers antigos
        run: docker compose -f docker-compose.prod.yml down --remove-orphans

      - name: üõ†Ô∏è Build do projeto Laravel + React
        run: docker compose -f docker-compose.prod.yml build --no-cache

      - name: üöÄ Subir containers em segundo plano
        run: docker compose -f docker-compose.prod.yml up -d

      - name: üß© Rodar comandos Laravel (migrate, cache)
        run: |
          docker compose -f docker-compose.prod.yml exec -T app.siv php artisan migrate --force
          docker compose -f docker-compose.prod.yml exec -T app.siv php artisan config:clear
          docker compose -f docker-compose.prod.yml exec -T app.siv php artisan config:cache
          docker compose -f docker-compose.prod.yml exec -T app.siv php artisan route:cache
          docker compose -f docker-compose.prod.yml exec -T app.siv php artisan view:cache

      - name: ‚úÖ Notifica√ß√£o Telegram (sucesso)
        if: success()
        run: |
          TEXT=$(cat <<EOF
          ‚úÖ *Deploy do SIV finalizado com sucesso!*
          *Branch:* \`main\`
          *Commit:* [${GITHUB_SHA}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA})
          *Autor:* ${GITHUB_ACTOR}
          *Ambiente:* Produ√ß√£o
          *Data:* $(date -u)
          EOF
                    )
                    curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
                      -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
                      --data-urlencode text="$TEXT" \
                      -d parse_mode=Markdown

                - name: ‚ùå Notifica√ß√£o Telegram (erro)
                  if: failure()
                  run: |
                    TEXT=$(cat <<EOF
          ‚ùå *Erro no deploy do SIV!*
          *Branch:* \`main\`
          *Commit:* [${GITHUB_SHA}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA})
          *Autor:* ${GITHUB_ACTOR}
          *Ambiente:* Produ√ß√£o
          Verifique os logs do GitHub Actions.
          EOF
                    )
                    curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
                      -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
                      --data-urlencode text="$TEXT" \
            -d parse_mode=Markdown
