# Dockerfile.prod corrigido
# ─── Stage 1: build do frontend ───────────────────────────────────────────────
FROM node:22-alpine AS frontend-builder
WORKDIR /app

COPY package.json package-lock.json ./
COPY tailwind.config.js postcss.config.js ./
COPY .env.production .env
COPY vendor/tightenco/ziggy ./vendor/tightenco/ziggy
RUN npm ci --silent

COPY resources ./resources
COPY vite.config.js tsconfig.json ./
RUN npm run build

# ─── Stage 2: instalação das dependências PHP ─────────────────────────────────
FROM composer:2.8.9 AS composer

FROM php:8.4-fpm-alpine3.20 AS backend-builder
WORKDIR /app

RUN apk add --no-cache bash tzdata libzip icu libxml2 oniguruma libpng \
    libjpeg-turbo freetype supervisor nginx shadow libcap \
 && apk add --no-cache --virtual .build-deps $PHPIZE_DEPS \
      libzip-dev icu-dev libxml2-dev oniguruma-dev libpng-dev \
      freetype-dev libjpeg-turbo-dev \
 && pecl install redis \
 && docker-php-ext-enable redis \
 && docker-php-ext-configure gd --with-freetype --with-jpeg \
 && docker-php-ext-install pdo_mysql pcntl gd zip intl xml mbstring \
 && apk del .build-deps \
 && cp /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime \
 && echo "America/Sao_Paulo" > /etc/timezone

# Copia o código Laravel (sem node_modules e arquivos desnecessários)
COPY . /app
COPY --from=frontend-builder /app/public /app/public

# Instala dependências PHP
COPY --from=composer /usr/bin/composer /usr/local/bin/composer
RUN composer install --no-dev --optimize-autoloader
RUN rm -f bootstrap/cache/config.php bootstrap/cache/services.php

# ─── Stage 3: imagem final ────────────────────────────────────────────────────
FROM php:8.4-fpm-alpine3.20 AS production

WORKDIR /var/www/html

# Instala dependências e extensões PHP
RUN apk add --no-cache su-exec bash tzdata libzip icu libxml2 oniguruma libpng \
    libjpeg-turbo freetype postgresql-libs supervisor nginx shadow libcap \
 && apk add --no-cache --virtual .build-deps $PHPIZE_DEPS \
      libzip-dev icu-dev libxml2-dev oniguruma-dev libpng-dev \
      freetype-dev libjpeg-turbo-dev postgresql-dev \
 && pecl install redis \
 && docker-php-ext-enable redis \
 && docker-php-ext-configure gd --with-freetype --with-jpeg \
 && docker-php-ext-install pdo_mysql pdo_pgsql pcntl gd zip intl xml mbstring \
 && apk del .build-deps \
 && cp /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime \
 && echo "America/Sao_Paulo" > /etc/timezone

# Permitir php-fpm escutar portas < 1024
RUN setcap "cap_net_bind_service=+ep" /usr/local/bin/php

# Remova o arquivo de configuração padrão que retorna 404
RUN rm -f /etc/nginx/http.d/default.conf

# Copia aplicação e configurações
COPY --from=backend-builder --chown=www-data:www-data /app /var/www/html
COPY .docker/php.ini /usr/local/etc/php/php.ini
COPY .docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY .docker/start-container /usr/local/bin/start-container
COPY .docker/nginx.conf /etc/nginx/http.d/laravel.conf
COPY .env.production .env

# Cria diretórios extras e ajusta permissões finais
RUN mkdir -p /var/log/supervisor /var/run/php /var/lib/nginx/tmp /var/lib/nginx/logs \
 && chown -R www-data:www-data /var/log/supervisor /var/run/php /var/lib/nginx \
 && chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache \
 && chmod +x /usr/local/bin/start-container

 RUN chown -R www-data:www-data /var/www/html/storage \
     && chmod -R 775 /var/www/html/storage

EXPOSE 80/tcp

ENTRYPOINT ["start-container"]